{"version":3,"sources":["Card.js","Cardlist.js","Searchbox.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","className","src","this","props","id","alt","width","height","name","email","React","Component","Cardlist","cardlistcomponent","robots","map","user","i","key","Searchbox","type","placeholder","onChange","searchboxchange","Scroll","style","overflow","children","App","searchchange","event","setState","searchbox","target","value","state","fetch","then","response","json","users","filteredrobots","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kNAgBeA,G,uLAXP,OACG,yBAAKC,UAAU,oDACf,yBAAKC,IAAG,+BAA0BC,KAAKC,MAAMC,GAArC,iBAAwDC,IAAI,SAASC,MAAM,MAAMC,OAAO,QAC5F,yBAAKP,UAAU,MACd,4BAAKE,KAAKC,MAAMK,MAChB,2BAAIN,KAAKC,MAAMM,a,GAPZC,IAAMC,YCaTC,E,iLAXH,IAAD,OACEC,EAAoBX,KAAKC,MAAMW,OAAOC,KAAI,SAACC,EAAKC,GAClD,OAAS,kBAAC,EAAD,CAAMC,IAAMD,EAAGb,GAAI,EAAKD,MAAMW,OAAOG,GAAGb,GAAII,KAAM,EAAKL,MAAMW,OAAOG,GAAGT,KAAMC,MAAO,EAAKN,MAAMW,OAAOG,GAAGR,WAEtH,OACI,6BACCI,O,GAPUH,IAAMC,WCOdQ,E,iLARP,OACI,yBAAKnB,UAAU,OACf,2BAAOA,UAAU,wCAAwCoB,KAAM,SAASC,YAAY,0BAA0BC,SAAUpB,KAAKC,MAAMoB,uB,GAJvHb,IAAMC,WCQda,EARA,SAACrB,GACZ,OACC,yBAAKsB,MAAO,CAAEC,SAAU,SAAUnB,OAAQ,UACzCJ,EAAMwB,SADP,MCoCSC,E,YAhCX,aAAc,IAAD,8BACT,+CAYJC,aAAe,SAACC,GACZ,EAAKC,SAAS,CAACC,UAAWF,EAAMG,OAAOC,SAZvC,EAAKC,MAAQ,CACTrB,OAAQ,GACRkB,UAAW,IAJN,E,iFAOQ,IAAD,OAChBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAU,EAAKT,SAAS,CAAEjB,OAAQ0B,S,+BAMrC,IAAD,OACEC,EAAiBvC,KAAKiC,MAAMrB,OAAO4B,QAAO,SAAA5B,GAC5C,OAAOA,EAAON,KAAKmC,cAAcC,SAAS,EAAKT,MAAMH,UAAUW,kBAEnE,OACI,yBAAK3C,UAAU,MACf,wBAAIA,UAAU,mBAAd,iBACA,kBAAC,EAAD,CAAWuB,gBAAmBrB,KAAK2B,eACnC,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUf,OAAU2B,U,GA1Bd/B,IAAMC,WCMJkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD4H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.16f16c6a.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'tachyons';\r\n//import robots from './robots';\r\nclass Card extends React.Component{\r\n    render(){\r\n        return(\r\n           <div className=\"tc bg-light-yellow dib br3 ma2 grow bw2 shadow-5\">\r\n           <img src={`https://robohash.org/${this.props.id}.png?set=set3`} alt=\"Robots\" width=\"200\" height=\"200\"/>\r\n               <div className='tc'>\r\n                <h6>{this.props.name}</h6>\r\n                <p>{this.props.email}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nclass Cardlist extends React.Component{\r\n    render(){\r\n        const cardlistcomponent = this.props.robots.map((user,i) => {\r\n            return  (<Card key ={i} id={this.props.robots[i].id} name={this.props.robots[i].name} email={this.props.robots[i].email}/>);\r\n        })\r\n        return (\r\n            <div>\r\n            {cardlistcomponent}\r\n            </div>\r\n            );\r\n    }\r\n}\r\n export default Cardlist;","import React from 'react';\r\nclass Searchbox extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className=\"pa3\">\r\n            <input className=\"pa3 ba b--green bg-lightest-bluetype=\" type =\"search\" placeholder=\"Search for your friends\" onChange={this.props.searchboxchange}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\n const Scroll = (props) => {\r\n     return(\r\n      <div style={{ overflow: 'scroll', height: '800px'}}>\r\n      {props.children};\r\n      </div>\r\n     );\r\n };\r\n\r\n export default Scroll;","import React from 'react';\r\nimport Cardlist from './Cardlist';\r\nimport Searchbox from './Searchbox';\r\nimport Scroll from './Scroll';\r\n\r\n\r\nclass App extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchbox :\"\"\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n          .then(response=> response.json())\r\n          .then(users => {this.setState({ robots: users})});\r\n      }\r\n\r\n    searchchange = (event) => {\r\n        this.setState({searchbox: event.target.value});\r\n    }\r\n    render(){\r\n        const filteredrobots = this.state.robots.filter(robots=> {\r\n            return robots.name.toLowerCase().includes(this.state.searchbox.toLowerCase());\r\n      })\r\n        return(\r\n            <div className=\"tc\">\r\n            <h1 className=\"f2 light-yellow\"> ROBOFRIENDS </h1>\r\n            <Searchbox searchboxchange = {this.searchchange}/>\r\n            <Scroll>\r\n            <Cardlist robots = {filteredrobots}/>\r\n            </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}